<!DOCTYPE html>
<html lang="en-us">

  <head>
  <link href="http://gmpg.org/xfn/11" rel="profile">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta http-equiv="content-type" content="text/html; charset=utf-8">

  <!-- Enable responsiveness on mobile devices-->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">

  <title>
    
      Homework 6 &middot; CS450: Introduction to Networking
    
  </title>

  <!-- CSS -->
  <link rel="stylesheet" href="/~balajee/cs450-f16/public/css/poole.css">
  <link rel="stylesheet" href="/~balajee/cs450-f16/public/css/syntax.css">
  <link rel="stylesheet" href="/~balajee/cs450-f16/public/css/lanyon.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=PT+Serif:400,400italic,700%7CPT+Sans:400">

  <!-- Icons -->
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/~balajee/cs450-f16/public/apple-touch-icon-precomposed.png">
  <link rel="shortcut icon" href="/~balajee/cs450-f16/public/favicon.ico">

  <!-- RSS -->
  <link rel="alternate" type="application/rss+xml" title="RSS" href="/atom.xml">
</head>


  <body class="theme-base-08">

    <!-- Target for toggling the sidebar `.sidebar-checkbox` is for regular
     styles, `#sidebar-checkbox` for behavior. -->
<input type="checkbox" class="sidebar-checkbox" id="sidebar-checkbox">

<!-- Toggleable sidebar -->
<div class="sidebar" id="sidebar">
  <div class="sidebar-item">
    <p>This is the webpage for the course "CS450: Introduction to Networking" at the University of Illinois at Chicago (UIC).</p>
  </div>

  <nav class="sidebar-nav">
    <a class="sidebar-nav-item" href="/~balajee/cs450-f16/">Home</a>

    

    
    
      
        
      
    
      
        
      
    
      
    
      
        
        <a class="sidebar-nav-item" href="/~balajee/cs450-f16/hw1/">Homework 1</a>
        
      
    
      
        
        <a class="sidebar-nav-item" href="/~balajee/cs450-f16/hw2/">Homework 2</a>
        
      
    
      
        
        <a class="sidebar-nav-item" href="/~balajee/cs450-f16/hw3/">Homework 3</a>
        
      
    
      
        
        <a class="sidebar-nav-item" href="/~balajee/cs450-f16/hw4/">Homework 4</a>
        
      
    
      
        
        <a class="sidebar-nav-item" href="/~balajee/cs450-f16/hw5/">Homework 5</a>
        
      
    
      
        
        <a class="sidebar-nav-item active" href="/~balajee/cs450-f16/hw6/">Homework 6</a>
        
      
    
      
        
        <a class="sidebar-nav-item" href="/~balajee/cs450-f16/schedule/">Schedule</a>
        
      
    
      
        
        <a class="sidebar-nav-item" href="/~balajee/cs450-f16/syllabus/">Syllabus</a>
        
      
    
    
    <!--
    <a class="sidebar-nav-item" href="/archive/v1.0.0.zip">Download</a>
    <a class="sidebar-nav-item" href="">GitHub project</a>
    <span class="sidebar-nav-item">Currently v1.0.0</span>
    -->
  </nav>

  <div class="sidebar-item">
    <p>
      &copy; 2018. All rights reserved.
    </p>
  </div>
</div>


    <!-- Wrap is the content to shift when toggling the sidebar. We wrap the
         content to avoid any CSS collisions with our real content. -->
    <div class="wrap">
      <div class="masthead">
        <div class="container">
          <h3 class="masthead-title">
            <a href="/~balajee/cs450-f16/" title="Home">CS450: Introduction to Networking</a>
            <small>Fall 2016</small>
          </h3>
        </div>
      </div>

      <div class="container content">
        <div class="page">
  <h1 class="page-title">Homework 6</h1>
  <h2 id="homework-6-studying-tcps-congestion-control-with-ns-3">Homework 6: Studying TCP’s congestion control with ns-3</h2>

<h3 id="brief-background-on-ns-3">Brief Background on ns-3</h3>

<p><a href="https://www.nsnam.org/">ns-3</a> is a discrete event simulator that models all the layers of the TCP/IP stack (except physical layer, of course!). It is open-source and is used extensively by researchers. The TCP code base of ns-3 is structured similar to the actual kernel code. Therefore, it is a good platform to implement newer protocols before spending arduous effort with hacking the actual kernel. ns-3 is written entirely in C++ along some Python scripts. All our code must be written in C++. Although you might be able to get by with some Python, I won’t recommend it. Another nice thing about ns-3 is that it generates PCAP packet traces and is compatible with other tools like <em>Tcpdump</em> and <em>Wireshark</em>.</p>

<p>This homework is not an exhaustive ns-3 project. So, I suggest that you refer to <a href="https://www.nsnam.org/documentation/">ns-3 documentation</a> on a need-to-know (on-demand) basis. However, I recommend spending some time reading the tutorial on the ns-3 website.</p>

<h3 id="goals-of-the-assignment">Goals of the assignment</h3>

<p>Primarily, there are three goals of this homework:</p>

<ol>
  <li>Learning to use ns-3 for evaluating simple protocol extensions.</li>
  <li>Understanding the difference between loss and congestion.</li>
  <li>Understanding TCP’s congestion control implementation by hacking it.</li>
</ol>

<h3 id="getting-the-code-base">Getting the code base</h3>

<p>To get started, check out the ns-3 code base from the repository. <strong><em>DO NOT</em></strong> download the code from the ns-3 web page. I have customized the ns-3 code for this homework.</p>
<div class="highlighter-rouge"><pre class="highlight"><code>public/hw6
</code></pre>
</div>

<h3 id="building-the-simulator">Building the simulator</h3>

<p>Prior to building the ns-3 simulator, your VM must be setup for development. If you have installed “build-essential” as part of homework #1, then you should be good to go.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>cd hw6/ns-allinone-3.25/ns-3.25
./waf configure --enable-examples --enable-tests
./waf
</code></pre>
</div>

<p>Once the build succeeds, we are ready to simulate some TCP!</p>

<h3 id="task-1-understanding-loss-25-of-grade">Task (1): Understanding loss (25% of grade)</h3>

<p>In class, we learned that TCP Reno uses duplicate acks to deal with transient congestion i.e., congestion episodes that last for a short amount of time. However, random losses induced by the medium (i.e., wi-fi) can <em>confuse</em> TCP’s congestion control.</p>

<p>I have provided a simulator code in <code class="highlighter-rouge">ns-allinone-3.25/ns-3.25/scratch/homework6a_lossy.cc</code>. This code simulates FTP over TCP between a client and a server. It uses TCP NewReno protocol which is an advanced version of the TCP Reno protocol (TCP Tahoe + Fast re-transmit/recovery) that we studied in the class. In addition, it also simulates random packet losses such as a wireless medium. Assuming that you are in <code class="highlighter-rouge">hw6/ns-allinone-3.25/ns-3.25/</code> directory, you can simulate this code using the command:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>./waf --run "scratch/homework6a_lossy --duration=5"
</code></pre>
</div>

<p>This will simulate a FTP transfer for 5 seconds. At the end of simulation, you will find many <code class="highlighter-rouge">homework6a_lossy-*</code> files. Among them, the file <code class="highlighter-rouge">homework6a_lossy-cwnd.data</code> shows how TCP’s congestion window evolves over time (the first column is time in seconds and the second column is congestion window in bytes). You can plot this data using <em>excel</em> or <em>gnuplot</em>. If you are using gnuplot, then you can use the command <code class="highlighter-rouge">gnuplot homework6a_lossy.plot</code>. The gnuplot script <code class="highlighter-rouge">homework6a_lossy.plot</code> is given to you as well. Spend some time understanding how the simulator code works.</p>

<p><strong>TO DO</strong>:</p>

<ol>
  <li>Plot of congestion window vs. time</li>
  <li>Label and explain “interesting” datapoints (i.e., packet loss, slow-start, congestion avoidance).</li>
</ol>

<h3 id="task-2-understanding-congestion-25-of-grade">Task (2): Understanding congestion (25% of grade)</h3>

<p>Congestion happens when the aggregate sending rate exceeds the network capacity. In the next example, we have multiple senders sending data to one receiver causing congestion. The provided simulator code <code class="highlighter-rouge">ns-allinone-3.25/ns-3.25/scratch/homework6b_incast.cc</code> creates a scenario where 100 senders send to one common destination and the final link to the destination becomes congested. Assuming that you are in <code class="highlighter-rouge">hw6/ns-allinone-3.25/ns-3.25/</code> directory, you can simulate this code using the command:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>./waf --run "scratch/homework6b_incast --num_flows=100 --duration=300"
</code></pre>
</div>

<p>This will simulate 100 FTP transfers to the same destination for 300 seconds. At the end of simulation, you will find many <code class="highlighter-rouge">homework6b_incast-*</code> files. Among them, the file <code class="highlighter-rouge">homework6b_incast-cwnd.data</code> shows how TCP’s congestion window evolves over time (the first column is time in seconds and the second column is congestion window in bytes). You can plot this data using <em>excel</em> or <em>gnuplot</em>. If you are using gnuplot, then you can use the command <code class="highlighter-rouge">gnuplot homework6b_incast.plot</code>. The gnuplot script <code class="highlighter-rouge">homework6b_incast.plot</code> is given to you as well. Spend some time understanding how the simulator code works.</p>

<p><strong>TO DO</strong>:</p>

<ol>
  <li>Plot of congestion window vs. time</li>
  <li>Label and explain “interesting” datapoints (i.e., packet loss, slow-start, congestion avoidance).</li>
  <li>What is the <em>qualitative</em> difference between this plot and the previous one?</li>
</ol>

<h3 id="task-3-implementing-tcp-tahoe-from-tcp-reno-50-of-grade">Task (3): Implementing TCP Tahoe from TCP Reno (50% of grade)</h3>

<p>In simple terms, TCP Tahoe is TCP Reno without fast re-transmit and fast-recovery. Thus, implementing TCP Tahoe on top of TCP Reno code is easy, and, therefore, is going to be our last homework! In this last task, you will hack the TCP stack so that you don’t react to duplicate ACKs. If you recall, simply not reacting to duplicate ACKs will disable fast-retransmit and fast-recovery.</p>

<p>I understand ns-3 is a large codebase. But here is a little pointer to the core of the congestion control code ==&gt; <code class="highlighter-rouge">ns-allinone-3.25/ns-3.25/src/internet/model/tcp-socket-base.cc</code>. The code change would be less than 50 lines. Once you have made the changes in <code class="highlighter-rouge">tcp-socket-base.cc</code>, run the simulation code from task(1) and task(2) with your modified code (TCP Tahoe). (Running the command line will automatically complile the code!).</p>

<p><strong>TO DO</strong>:</p>

<ol>
  <li>Two plots of congestion window vs. time from running the modified code.</li>
  <li>Explain how the new plots with your modified code (TCP Tahoe) differ from the previous plots (i.e.,TCP Reno)?</li>
</ol>

<h3 id="turn-in">Turn-in</h3>

<ul>
  <li>Add/commit your version of ns-3 directory to git. We will build your code to check if your plots are reproducible.</li>
  <li>Make a PDF report with plots and explanations for tasks (1), (2), and (3): one plot + explanation for task(1), one plot + explanation for task(2), and two plots + explanation for task (3). Place the report in a directory called <code class="highlighter-rouge">report</code> in <code class="highlighter-rouge">hw6/ns-allinone-3.25/ns-3.25/</code>. Commit the report to git.</li>
</ul>

<h3 id="deadline">Deadline</h3>

<p>This homework is due on <alert>November 21, Monday</alert> at <alert>11 pm</alert> .</p>

<h3 id="grading">Grading</h3>

<p>The grading for this homework, will be done manually.</p>


</div>

      </div>
    </div>

    <label for="sidebar-checkbox" class="sidebar-toggle"></label>

    <script>
      (function(document) {
        var toggle = document.querySelector('.sidebar-toggle');
        var sidebar = document.querySelector('#sidebar');
        var checkbox = document.querySelector('#sidebar-checkbox');

        document.addEventListener('click', function(e) {
          var target = e.target;

          if(!checkbox.checked ||
             sidebar.contains(target) ||
             (target === checkbox || target === toggle)) return;

          checkbox.checked = false;
        }, false);
      })(document);
    </script>
  </body>
</html>
