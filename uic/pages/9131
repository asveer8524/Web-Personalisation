<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
<head>
<script type="text/javascript" src="/pub/TWiki/JQueryPlugin/jquery.js"></script>
<script type="text/javascript" src="/pub/TWiki/JQueryPlugin/jquery-migrate.js"></script>
<link rel="stylesheet" href="/pub/TWiki/JQueryPlugin/jquery-all.css" type="text/css" media="all" />
<script type="text/javascript" src="/pub/TWiki/JQueryPlugin/jquery-all.js"></script>
<title> Homework9 &lt; CS450 &lt; TWiki</title>

<link rel="icon" href="https://www1.cs.uic.edu/images/favicon.ico" type="image/x-icon" />
<link rel="alternate" href="https://www.cs.uic.edu/bin/edit/CS450/Homework9?_T=2018-11-25" type="application/x-wiki" title="edit Homework9" />
<link rel="shortcut icon" href="https://www1.cs.uic.edu/images/favicon.ico" type="image/x-icon" />
<meta name="SCRIPTURLPATH" content="/bin" />
<meta name="SCRIPTSUFFIX" content="" />
<meta name="TEXT_JUMP" content="Jump" />
<meta name="TEXT_SEARCH" content="Search" />
<meta name="TEXT_NUM_TOPICS" content="Number of topics:" />
<meta name="TEXT_MODIFY_SEARCH" content="Modify search" />
<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/bin/view/CS450/WebRss" />
<base href="https://www.cs.uic.edu/bin/view/CS450/Homework9"></base>
<!--BEHAVIOURCONTRIB--><script type="text/javascript" src="/pub/TWiki/BehaviourContrib/behaviour.compressed.js"></script>
<script type="text/javascript" src="/pub/TWiki/TWikiJavascripts/twikilib.js"></script>
<script type="text/javascript" src="/pub/TWiki/TWikiJavascripts/twikiWindow.js"></script>
<script type="text/javascript" src="/pub/TWiki/TWikiJavascripts/twikiEvent.js"></script>
<script type="text/javascript" src="/pub/TWiki/TWikiJavascripts/twikiHTML.js"></script>
<script type="text/javascript" src="/pub/TWiki/TWikiJavascripts/twikiCSS.js"></script>
<script type="text/javascript" src="/pub/TWiki/TWikiJavascripts/twikiForm.js"></script>
<script type="text/javascript" src="/pub/TWiki/PatternSkin/pattern.js"></script>
<style type="text/css" media="all">
@import url('/pub/TWiki/TWikiTemplates/base.css');
</style>
<style type="text/css" media="all">
#patternTopBar,
#patternClearHeaderCenter,
#patternClearHeaderLeft,
#patternClearHeaderRight,
#patternTopBarContentsOuter,
#patternTopBarContents {
/*	height:64px; */ /* top bar height; make room for header columns */
	overflow:hidden;
}
#patternOuter {
	margin-left:14em;
}
#patternLeftBar {
	width:14em;
	margin-left:-14em;
}
</style>
<style type="text/css" media="all">
@import url('/pub/TWiki/PatternSkin/layout.css');
@import url('/pub/TWiki/PatternSkin/style.css');
@import url('/pub/TWiki/PatternSkin/colors.css');
</style>
<style type="text/css" media="all">
	/* Styles that are set using variables */
	.patternBookView .twikiTopRow,
	.patternWebIndicator a img,
	.patternWebIndicator a:hover img {
		background-color:#D0D0D0;
	}
	#patternTopBarContents { background-image:url(none); background-repeat:no-repeat;}
	
	.patternBookView {
		border-color:#D0D0D0;
	}
	.patternPreviewPage #patternMain {
		/* uncomment to set the preview image */
		/*background-image:url("/pub/TWiki/PreviewBackground/preview2bg.gif");*/
	}
	
</style><style type="text/css" media="all">

@import url('/pub/Main/WebPreferences/mainweb.css');

</style>
<style type="text/css" media="all">
	@import url("/pub/TWiki/PatternSkin/print.css");
</style>
<!--[if IE]><style type="text/css" media="screen">
pre {
	overflow-x:auto;
	padding-bottom:expression(this.scrollWidth > this.offsetWidth ? 16 : 0);
}
</style>
<![endif]-->
<!--[if lte IE 6]> 
<style type="text/css">
#patternLeftBar {
	position:relative; /* IE 5.5 needs this or the contents won't show outside the parent container on print. IE 6.0 needs it only during printable copy! */
}
</style><![endif]-->
<script type="text/javascript" src="/pub/TWiki/TWikiJavascripts/twikiStyles.js"></script>

<!-- Google Analytics Snippet -->

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17081517-1']);
  _gaq.push(['_setDomainName', 'none']);
  _gaq.push(['_setAllowLinker', true]);
  _gaq.push(['_trackPageview']);

  (function() {
	 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + 
'.google-analytics.com/ga.js';
	 var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

<!-- /Google Analytics Snippet -->
</head>
<body class="patternViewPage">
<a name="PageTop"></a>
<div id="patternScreen">
<div id="patternPageShadow">
<div id="patternPage">
<div id="patternWrapper"><div id="patternOuter">
<div id="patternFloatWrap">
<div id="patternMain"><div id="patternClearHeaderCenter"></div>
<div id="patternMainContents"><div class="patternTop"><span class="patternHomePath twikiLeft"><a href="/bin/view/Main/WebHome" class="twikiLink">TWiki</a><span class='twikiSeparator'>&gt;</span><img src="/pub/TWiki/TWikiDocGraphics/web-bg-small.gif" border="0" alt="" width="13" height="13" style="background-color:#D0D0D0" />&nbsp;<a href="/bin/view/CS450/WebHome">CS450 Web</a><span class='twikiSeparator'>&gt;</span><a href="/bin/view/CS450/Homework1" class="twikiLink">Homework1</a><span class='twikiSeparator'>&gt;</span><a href="/bin/view/CS450/Homeworks" class="twikiLink">Homeworks</a><span class='twikiSeparator'>&gt;</span><a href="https://www.cs.uic.edu/bin/view/CS450/Homework9" title='Topic revision: 4 (2012-11-22 - 16:50:35)'>Homework9</a> <span class='patternRevInfo'>(2012-11-22, Main.jakob)</span></span><!-- /patternHomePath--><span class="patternToolBar twikiRight"><span><a href='https://www.cs.uic.edu/bin/edit/CS450/Homework9?t=1543180412' rel='nofollow' title='Edit this topic text' accesskey='e'><span class='twikiAccessKey'>E</span>dit</a></span><span><a href='/bin/attach/CS450/Homework9' rel='nofollow' title='Attach an image or document to this topic' accesskey='a'><span class='twikiAccessKey'>A</span>ttach</a></span></span><!-- /patternToolBar--><br class="twikiClear" /></div><!--/patternTop--><div class="twikiContentHeader"></div><div class="patternContent"><div class="patternTopic"> <h1><a name="Homework_9_Roll_Your_Own_Router"></a> Homework 9: Roll-Your-Own Router </h1>
<p />
 In this assignment you will implement a fully functional Internet router that routes real network traffic. The goal is to give you hands-on experience as to how a router really works. Your router will run as a user process locally, and when finished will route real packets that are flowing across the Internet to application servers located at Stanford. We&rsquo;ll be giving you a skeleton, incomplete router (the &ldquo;sr&rdquo; or simple router) that you have to complete, and then demonstrate that it works by performing traceroutes, pings and downloading some files from a web server via your router.
<p />
<h2><a name="The_Virtual_Network_System"></a> The Virtual Network System </h2>
<p />
In this homework, we use the Stanford Virtual Network System (VNS) to create a separate, virtual, router for each student in the class. The router is directly connected to the Internet, and to two (virtual) web servers that are connected to the Internet via your router. 
<p />
What's unique about your VNS router is that its outsources its logic to a program on your computer: whenever it receives a packet, it'll send it to your program, and your program gets to decide what to do next: forward the packet out some other interface, send some other packet in response, etc.
<p />
To get you started, you're given a dumb router that just receives packets and prints something out. Your job is to make it do what routers do. 
<p />
<h2><a name="Setup_Fetching_your_authorizatio"></a> Setup: Fetching your authorization key </h2>
<p />
After exporting the template, you need to update the file <code>auth_key</code> with your specific key. To get your key, log into the <a href="http://vns-2.stanford.edu/" target="_top">VNS web interface</a> and click "Your Profile". Your key is listed on that page.
<p />
<h2><a name="Setup_Your_routing_table"></a> Setup: Your routing table </h2>
<p />
Your router will make routing decisions based on a fixed routing table. This is available from the VNS web page as well. Under "Your Profile", click on the link to your specific topology (bottom of the table), then "Topology Routing Table". 
<p />
<pre>
171.67.71.22 171.67.71.22 255.255.255.255 eth1 
171.67.71.24 171.67.71.24 255.255.255.255 eth2 
171.64.22.20 171.67.71.24 255.255.255.254 eth2 
0.0.0.0 172.24.74.17 0.0.0.0 eth0
</pre>
<p />
The format of a single line is: prefix next_hop netmask interface
<p />
Where prefix is an IPv4 base address, next_hop is the IP address of the host that is the next step in the routing sequence, netmask is a netmask telling the router how which addresses are covered by this rule, and interface is the name of an Ethernet interface on the router. So for this example, packets for 171.67.71.22 (and only 171.67.71.22) are routed directly to that host out interface eth1. Packets that do not make a longer prefix match are caught by the default rule at the bottom, which sends packets with no longer prefix match out eth0 to be forwarded by 172.24.74.17 (which happens to be the firewall).
<p />
Save the routing table for your topology in the file <code>rtable</code> in the template.
<p />
<h2><a name="Test_Driving_the_sr_Stub_Code"></a> Test Driving the sr Stub Code: </h2>
<p />
Before beginning development you should first get familiar with the sr stub code and some of the functionality it provides. Download the stub code and save it locally. As described before, it handles all of the dirty-work required for connecting and communicating with the server.
<p />
To run the code, untar the package (tar zxvf sr_stub.tar.gz) and compile it via make. You also need to create a file named &ldquo;auth_key&rdquo; in the folder with the stub code. This &ldquo;auth_key&rdquo; file should have your authentication key which lets the server know who you are. You can get this key by logging into [[http://vns-2.stanford.edu/login/][the VNS web interface] and going to &ldquo;Your Profile.&rdquo; Be careful to copy your authentication key exactly as it appears.
<p />
Now you can connect to the VNS server as follows:
<p />
<code>./sr -s vns-1.stanford.edu -t &lt;your_topology_number&gt; -u &lt;your_userid&gt;</code>
<p />
for example, connecting to the server on topology 0 as user <code>dgu</code> might look like this:
<p />
<code>./sr -s vns-1.stanford.edu -t 0 -u dgu</code>
<p />
(you can use ./sr -h to print a list of the accepted command line options)
<p />
After you connect successfully, the server will send you a description of the host including all the interfaces and their IP addresses. The stub code uses this to build the interface list in the router (the head of the list is member if_list for struct sr_instance). The routing table is constructed from the file rtable and implementing the internal representation of the routing table along with the lookup algorithm is part of this assignment. The routing table format is as follows:
<p />
ip gateway mask interface a valid rtable file may look as follows:
<p />
<pre>
172.24.74.213 172.24.74.213 255.255.255.255 eth1
172.24.74.228 172.24.74.228 255.255.255.255 eth2
0.0.0.0 172.24.74.17 0.0.0.0 eth0
</pre>
<p />
The VN Server, on connection should return the IP addresses associated with each one of the interfaces.
<p />
To test if the router is actually receiving packets try pinging or running traceroute to the IP address of eth0 (which is connected to the firewall in the assignment topology). The sr should print out that it received a packet. What type of packet do you think this is?
<p />
What should your router do on receipt of an ARP request packet?
<p />
<h2><a name="Inspecting_Packets_with_tcpdump"></a> Inspecting Packets with tcpdump </h2>
<p />
As you work with the sr router, you will want to take a look at the packets that the router is sending and receiving. The easiest way to do this is by logging packets to a file and then displaying them using a program called tcpdump.
<p />
First, tell your router to log packets to a file in a format that tcpdump can read by passing it the -l option and a filename:
<p />
<code>./sr -t -s vns-1.stanford.edu -l &lt; logfile &gt;</code>
<p />
As the router runs, it will log the packets that it receives and sends (including headers) to the indicated file. After the router has run for a bit, use tcpdump to display the packets in a readable form:
<p />
<code>tcpdump -r &lt; logfile &gt; -e -vvv -x</code>
<p />
The -r switch tells tcpdump where to look for the logfile. -e tells tcpdump to print the headers of the packets, not just their payload. -vvv makes the output very verbose, and -x puts the packets in a hex format that is usually easier to read than ASCII. You may want to specify the -xx option instead of -x to print the link-level (Ethernet) header in hex as well.
<p />
You may also optionally use scp to copy the log file to another machine and use Wireshark to inspect the packets there.
<p />
<h2><a name="Rolling_Your_Own_Router_Using_th"></a> Rolling Your Own Router Using the SR Stub Code </h2>
<p />
The majority of the code which makes the router work is provided for you. You will be responsible for implementing important elements of several subsystems within the router. All code must be added to sr_router.c and sr_router.h.
<p />
You are responsible for implementing:
<p /> <ul>
<li> in sr_handlepacket(): parse the provided ethernet frame, verify that it is valid and to this interface, and call handle_ip() or handle_arp() as needed.
</li> <li> in handle_arp(): handle incoming ARP requests by sending a reply if necessary.
</li> <li> in handle_ip(): verify the validity of the IP header, handle packets destined for the router (only ICMP Ping must be handled, all data packets should receive an error response), and forward/drop packets NOT addressed to this router as appropriate.
</li> <li> in rtable_find_route(): find the best route in the routing table, and return a pointer to that element in the linked list of routing table entries.
</li> <li> in router_queue_ethernet_frame(): craft an outgoing ethernet packet based on the given payload, source, and destination, and send it out via sr_send_packet.
</li> <li> in network_send_packet_from(): allocate a new IP packet, set its headers and payload correctly, and call router_send_ethernet_frame to send it along.
</li> <li> in icmp_send(): allocate, fill, and send a new ICMP packet using network_send_packet or network_send_packet_from. If the src ip is null, you can use network_send_packet to set the src ip based on the routing decision for the destination.
</li></ul> 
<p />
<h2><a name="Dealing_with_Protocol_Headers"></a> Dealing with Protocol Headers </h2>
<p />
Within the sr framework you will be dealing directly with raw Ethernet packets. There are a number of resources which describe the protocol headers in detail, including Stevens UNP, www.networksorcery.com and the Internet RFC&rsquo;s for ARP (RFC826), IP (RFC791), and ICMP (RFC792). The stub code itself provides some data structures in sr_protocols.h which you may use to manipulate headers. There is no requirement that you use the provided data structures, you may prefer to write your own or use standard system includes.
<p />
<h2><a name="To_Help_You_Get_Started"></a> To Help You Get Started </h2>
<p />
Tracerouting to the application servers should look something like this:
<p />
<pre>
&#91;casado&#64;yuba ~]$ /usr/sbin/traceroute 171.67.71.24 
traceroute to 171.67.71.47 (171.67.71.47), 30 hops max, 38 byte packets 
1 Gates-rtr (171.64.74.1) 0.546 ms 0.329 ms 0.287 ms 
2 vns-firewall (172.24.74.11) 0.393 ms 0.302 ms 0.285 ms 
3 171.67.71.20 (171.67.71.45) 2.332 ms 1.165 ms 1.435 ms 
4 171.67.71.24 (171.67.71.47) 3.243 ms 2.098 ms 2.094 ms
</pre>
<p />
<h2><a name="Required_Functionality"></a> Required Functionality </h2>
<p />
We will declare that your router is functioning correctly if and only if:
<p /> <ul>
<li> The router can successfully route packets between the firewall and the application servers.
</li> <li> The router correctly handles ARP requests and replies.
</li> <li> The router correctly handles traceroutes through it (where it is not the end host) and to it (where it is the end host).
</li></ul> 
<p />
<h2><a name="Simplifying_assumptions_requirem"></a> Simplifying assumptions/requirements </h2>
<p /> <ul>
<li> no IP Options
</li> <li> no IP Fragmentation
</li> <li> no IPv6
</li> <li> all non-ICMP messages sent directly to routers receive an 'ICMP Protocol Unreachable' message in reply.
</li> <li> the only ICMP message you must reply to is ICMP Ping.
</li> <li> all ARP packets must be for the Ethernet hardware type and IP protocol type.
</li> <li> Only ARP Requests and ARP Replies are to be processed.
</li></ul> 
<p />
<h2><a name="Deliverables"></a> Deliverables </h2>
<p />
The source code for your router. You may add files to those provided with the stub code; be sure to update your Makefile if you do. Your README file describing design decisions that you made, and any trade offs that you encountered in the design.
<p />
Special thanks to the Stanford High Performance Networking Group and Stanford University
<p />
<p />
<h1><a name="Appendix"></a> Appendix </h1>
<p />
This is some additional information that was there in the original homework description. You may find it useful.
<p />
<h2><a name="Overview_of_the_Virtual_Network"></a> Overview of the Virtual Network System (VNS) </h2>
 The VNS was designed at Stanford, for Stanford's introductory networking course CS144. It gives you hands-on experience working on projects requiring low level network access, such as routers. The VNS is comprised of two components: (1) The VNS Server which runs in a lab at Stanford, and (2) A number of VNS Clients which connect to the server. Your router is an example of a VNS Client. The server intercepts packets on the network, forwards the packets to the clients, receives packets from the client and injects them back into the network. The physical setup of the VNS is shown in the figure.
<p />
<img width="371" alt="" src="http://cseweb.ucsd.edu/classes/fa10/cse123/images/layout.gif" height="371" />
<p />
<h2><a name="The_VNS_Server"></a> The VNS Server </h2>
<p />
The server is a user level process running at Stanford. The machine hosting the server is connected to a hub which is connected to two HTTP servers, referred to as application servers. The VNS Server simulates a network topology which consists of multiple links and VNS Clients. The application servers sit on the other side of the network topology. For example, a simple topology would be one with a single VNS Client and one application server, as shown below in the figure.
<p />
<img width="343" alt="" src="http://cseweb.ucsd.edu/classes/fa10/cse123/images/operation.gif" height="348" />
<p />
A client wanting access to traffic in the network connects to the server via a normal TCP socket and requests the traffic seen on links in the topology, in this case, topology 0. Assuming the traffic is not already being sent to some other user, the server accepts the request and sends the traffic on the link to the client over the TCP socket. The client would then inspect the packet, determine where the next hop in the network (which would be fairly easy in the case of topology 0) and send the packet back to the server to be injected back into the network.
<p />
The VNS Server can handle multiple (2^16) topologies simultaneously. This means that each student can have his or her own topology to connect to and route over. The VNS Server ensures that clients are only sent traffic belonging to their topology.
<p />
<h2><a name="The_VNS_Client"></a> The VNS Client </h2>
<p />
A VNS client is any program that speaks the VNS protocol and connects to the VNS server. In the case of this assignment we provide you with the code for a basic VNS client (called sr or Simple Router) that can connect to the VNS server. The clients are run locally by the students as regular user processes and connect to the server via normal TCP sockets. Clients, once connected to the server, are forwarded all packets that they are supposed to see in the topology. The clients can manipulate the packets in any way they wish, generate responses based on the packets, or make routing decisions for those packets and send the replies back to the server to place back onto the network. For example, on the above topology (topology 0), the VNS Server might receive a TCP SYN packet destined for vns-app-1.stanford.edu. The VNS Server sends the packet to the VNS Client which would receive the packet on interface zero, decrement the TTL, recalculate the header checksum, consult the routing table and send the packet back to the server with directions to inject it back onto the network out of interface one. What will the destination hardware address be for the packet sent back by the client? What if the client doesn&rsquo;t know the hardware address for www-server-1?
<p />
In this assignment you will implement a fully functional router by extending the sr code given to you.
<p />
<h2><a name="Packet_Flow_Through_the_System"></a> Packet Flow Through the System </h2>
<p />
The following scenario is a step by step explanation of how a client routes traffic on a simple topology.
<p />
Nick has just finished developing his router for programming assignment #2. He is using the hypothetical topology 42 for testing which is shown in the figure below.
<p />
<img width="385" alt="" src="http://cseweb.ucsd.edu/classes/fa10/cse123/images/sr_topo.gif" height="232" />
<p />
To test, Nick runs his router from ieng6.ucsd.edu and connects to the VNS server at vns-1.stanford.edu, topology 42. The VNS server sends Nick&rsquo;s router the list of interfaces and their IP addresses.
<p />
To generate traffic for routing, Nick fires up a standard web browser from his local computer pointed at the IP of the application server on topology 42. Nick&rsquo;s router will now get the opportunity to route all packets between his web browser and the web server.
<p />
We&rsquo;ll now walk through the first few significant steps that take place when packets flow between Nick&rsquo;s web browser and the web server.
<p /> <ul>
<li> A SYN packet leaves Nick&rsquo;s machine destined to the web server&rsquo;s IP and is routed to the VN Server.
</li> <li> Late in the evening before the project was released, Chris arranged for Nick&rsquo;s packet to be delivered to topology 42, starting with the IP address of interface zero on Nick&rsquo;s client. The hop before Nick&rsquo;s router sends an ARP packet requesting the hardware address of the interface with IP of interface zero on Nick&rsquo;s client.
</li> <li> The VNS Server sends the raw Ethernet, ARP packet over the socket to Nick&rsquo;s VNS Client which responds with an ARP reply.
</li> <li> On receipt of the ARP reply, the hop before Nick&rsquo;s router, then forwards the packet to the Nick&rsquo;s router.
</li> <li> The VNS Server intercepts the packet and sends the raw Ethernet IP packet over the socket to Nick&rsquo;s VNS Client for his to route.
</li> <li> Nick&rsquo;s router decrements the TTL field in the IP header and recalculates the checksum.
</li> <li> Nick&rsquo;s router consults its routing table and determines the next hop is the ip for the web server.
</li> <li> When Nick&rsquo;s router has made its routing decision, it must send back to the VN Server a properly formatted Ethernet packet. This means that the client must find the Ethernet address of the next hop. To do this, the client sends an ARP, in the usual way, to find out the Ethernet address belonging to the next hop IP address.
</li> <li> The next hop, which could be another client or an application server, responds to the ARP, and Nick&rsquo;s client completes the Ethernet packet and sends it back to the VNS server. (The client also caches the ARP reply for future use).
</li> <li> The VNS Server sends the packet out of the correct interface, and to the next hop in the topology.
</li> <li> &hellip;. etc.
</li></ul>  </div><!-- /patternTopic-->
<div class="twikiContentFooter"></div></div><!-- /patternContent-->
<a name="topic-actions"></a><div class="patternTopicActions"><div class="patternTopicAction"><span class="patternActionButtons"><span><a href='https://www.cs.uic.edu/bin/edit/CS450/Homework9?t=1543180412' rel='nofollow' title='Edit this topic text' accesskey='e'><span class='twikiAccessKey'>E</span>dit</a></span><span class='twikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/bin/attach/CS450/Homework9' rel='nofollow' title='Attach an image or document to this topic' accesskey='a'><span class='twikiAccessKey'>A</span>ttach</a></span><span class='twikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/bin/view/CS450/Homework9?cover=print' rel='nofollow' title='Printable version of this topic' accesskey='p'><span class='twikiAccessKey'>P</span>rint version</a></span><span class='twikiSeparator'>&nbsp;|&nbsp;</span><span><span><a href='/bin/rdiff/CS450/Homework9?type=history' rel='nofollow' title='View total topic history' accesskey='h'><span class='twikiAccessKey'>H</span>istory</a></span>: r4&nbsp;<a rel="nofollow" href="/bin/rdiff/CS450/Homework9?rev1=4;rev2=3">&lt;</a>&nbsp;<a rel="nofollow" href="/bin/view/CS450/Homework9?rev=3">r3</a>&nbsp;<a rel="nofollow" href="/bin/rdiff/CS450/Homework9?rev1=3;rev2=2">&lt;</a>&nbsp;<a rel="nofollow" href="/bin/view/CS450/Homework9?rev=2">r2</a>&nbsp;<a rel="nofollow" href="/bin/rdiff/CS450/Homework9?rev1=2;rev2=1">&lt;</a>&nbsp;<a rel="nofollow" href="/bin/view/CS450/Homework9?rev=1">r1</a></span><span class='twikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/bin/oops/CS450/Homework9?template=backlinksweb' rel='nofollow' title='Search the CS450 Web for topics that link to here' accesskey='b'><span class='twikiAccessKey'>B</span>acklinks</a></span><span class='twikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/bin/view/CS450/Homework9?raw=on' rel='nofollow' title='View raw text without formatting' accesskey='r'><span class='twikiAccessKey'>R</span>aw View</a></span><span class='twikiSeparator'>&nbsp;|&nbsp;</span><span><a href='https://www.cs.uic.edu/bin/edit/CS450/Homework9?t=1543180412;nowysiwyg=1' rel='nofollow' title='Raw Edit this topic text' accesskey='w'>Ra<span class='twikiAccessKey'>w</span> edit</a></span><span class='twikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/bin/oops/CS450/Homework9?template=oopsmore&amp;param1=4&amp;param2=4' rel='nofollow' title='Delete or rename this topic; set parent topic; view and compare revisions' accesskey='m'><span class='twikiAccessKey'>M</span>ore topic actions</a></span></span></div><!--/patternTopicAction--></div><!--/patternTopicActions--><div class="patternInfo twikiGrayText"><div class="patternRevInfo">Topic revision: r4 - 2012-11-22 - 16:50:35 - Main.jakob</div><!-- /patternRevInfo--><div class="patternMoved"></div><!-- /patternMoved--></div><!-- /patternInfo-->
</div><!-- /patternMainContents-->
</div><!-- /patternMain--><div id="patternLeftBar"><div id="patternClearHeaderLeft"></div>
<div id="patternLeftBarContents"><div class="patternWebIndicator"> <ul>
<li> <a href="/bin/view/CS450/WebHome" class="twikiCurrentWebHomeLink twikiLink"><img src="/pub/TWiki/TWikiDocGraphics/web-bg-small.gif" width="13" height="13" alt="Web background" title="Web background" border="0" /> CS450</a>
</li></ul> 
</div> <ul>
<li> <a href="/bin/view/CS450/WebHome" class="twikiCurrentWebHomeLink twikiLink">CS450 Home</a>
</li> <li> <a href="/bin/view/CS450/Syllabus" class="twikiLink">Syllabus</a>
</li> <li> <a href="/bin/view/CS450/Homeworks" class="twikiLink">Homeworks</a>
</li> <li> - <a href="/bin/view/CS450/UsingSubversion" class="twikiLink">Using Subversion</a>
</li> <li> <a href="https://piazza.com/class#spring2013/cs450" target="_top">Discussion Forum</a>
</li> <li> <a href="/bin/view/CS450/LectureNotes" class="twikiLink">Lecture Notes</a>
</li></ul> 
<hr />
<div class="patternLeftBarPersonal">
<ul><li class="patternLogIn"><a href="/bin/logon/CS450/Homework9">Log In</a> </li></ul>
</div><!--/patternLeftBarPersonal-->
<p /> <ul>
<li> <strong><a href="/bin/view/CS450/WebHome" class="twikiCurrentWebHomeLink twikiLink"> <img src="/pub/TWiki/TWikiDocGraphics/home.gif" width="16" height="16" alt="Home" title="Home" border="0" /> CS450 Web</a></strong>
</li> <li> <a href="/bin/view/CS450/WebCreateNewTopic?topicparent=Homework9" target="_top"> <img src="/pub/TWiki/TWikiDocGraphics/newtopic.gif" width="16" height="16" alt="New topic" title="New topic" border="0" /> Create New Topic</a>
</li> <li> <a href="/bin/view/CS450/WebTopicList" class="twikiLink"> <img src="/pub/TWiki/TWikiDocGraphics/index.gif" width="16" height="16" alt="Index" title="Index" border="0" /> Index</a>
</li> <li> <a href="/bin/view/CS450/WebSearch" class="twikiLink"> <img src="/pub/TWiki/TWikiDocGraphics/searchtopic.gif" width="16" height="16" alt="Search topic" title="Search topic" border="0" /> Search</a>
</li> <li> <a href="/bin/view/CS450/WebChanges" class="twikiLink"> <img src="/pub/TWiki/TWikiDocGraphics/changes.gif" width="16" height="16" alt="Changes" title="Changes" border="0" /> Changes</a>
</li> <li> <a href="/bin/view/CS450/WebNotify" class="twikiLink"> <img src="/pub/TWiki/TWikiDocGraphics/notify.gif" width="16" height="16" alt="Notify" title="Notify" border="0" /> Notifications</a>
</li> <li> <a href="/bin/view/CS450/WebRss" class="twikiLink"> <img src="/pub/TWiki/TWikiDocGraphics/feed.gif" width="16" height="16" alt="RSS feed, rounded corners" title="RSS feed, rounded corners" border="0" /> RSS Feed</a>
</li> <li> <a href="/bin/view/CS450/WebStatistics" class="twikiLink"> <img src="/pub/TWiki/TWikiDocGraphics/statistics.gif" width="16" height="16" alt="Statistics" title="Statistics" border="0" /> Statistics</a>
</li> <li> <a href="/bin/view/CS450/WebPreferences" class="twikiLink"> <img src="/pub/TWiki/TWikiDocGraphics/wrench.gif" width="16" height="16" alt="Wrench, tools" title="Wrench, tools" border="0" /> Preferences</a>
</li></ul> 
<p />
<hr />
</div><!-- /patternLeftBarContents--></div><!-- /patternLeftBar-->
</div><!-- /patternFloatWrap-->
<div class="clear">&nbsp;</div>
</div><!-- /patternOuter--></div><!-- /patternWrapper--><div id="patternTopBar"><div id="patternTopBarContents"><div id="twikiLogo" class="twikiImage">
<map id="logomap" name="logomap">
	<area shape="rect" alt="" title="" coords="144,20,317,74" href="https://www.cs.uic.edu" target=""/>
	<area shape="rect" alt="College of Engineering" title="" coords="125,76,300,91" href="http://www.engineering.uic.edu/" target=""/>
	<area shape="rect" alt="University of Illinois at Chicago" title="" coords="10,20,120,71" href="http://www.uic.edu" target=""/>
</map>
<img src="https://www.cs.uic.edu/pub/cslogo_ds.png" alt="Home - this site is powered by TWiki(R)" border="0" style="border:none;" usemap="#logomap"/>
</div>
<p />
<div style="margin-left:650px; position:relative;">
	<form name="quickSearchForm" method="get" action="https://www.google.com/search">
		<input id=quickSearchBox type="text" class="twikiInputField" name="q" size="18" maxlength="255" value=""/>
		<input type="hidden" name="sitesearch" value="cs.uic.edu"/>
	</form>
</div>
<p />
<div id="menuContainer" style="overflow:visible; position:absolute; z-index:2; width:640px; left:342px; top:58px;">
<div id="navMenu">
<ul>
<li> <a href="#">ABOUT US</a>
	<ul>
	<li><a href="https://www.cs.uic.edu/Main/AboutCS">Our Department</a></li>
	<li><a href="https://www.cs.uic.edu/bin/view/Main/NewsArchive">Recent News</a></li>
	<li><a href="https://www.cs.uic.edu/bin/view/Main/Contact">Contact Us</a></li>
	</ul>
</li>
</ul>
<ul>
<li> <a href="#">ACADEMICS</a>
	<ul>
	<li><a href="/Main/ProspectiveStudents">Prospective Students</a></li>
	<li><a href="/Main/UndergraduatePrograms">Undergraduate</a></li>
	<li><a href="/Main/ComputerScienceMinor">CS Minor</a></li>       
	<li><a href="/Main/GraduatePrograms">Graduate</a></li>
	<li><a href="/Main/Courses">Courses</a></li>
	</ul>
</li>
</ul>
<ul>
<li> <a href="#">RESEARCH</a>
	<ul>
	<li><a href="/Main/Research">Overview</a></li>
	<li><a href="/Main/Faculty-Area">By Faculty</a></li>
	<li><a href="/Main/Research#Labs">Labs</a></li>
	</ul>
</li>
</ul>
<ul>
<li> <a href="#">PEOPLE</a>
	<ul>
	<li><a href="https://www.cs.uic.edu/faculty/">Faculty</a></li>
	<li><a href="https://www.cs.uic.edu/adjuncts/">Adjuncts</a></li>
	<li><a href="https://www.cs.uic.edu/staff">Staff</a></li>
	<li><a href="/Main/Students">Students</a></li>
	<li><a href="/Main/Alumni?y=2015">Alumni</a></li>
	</ul>
</li>
</ul>
<br class="clearFloat"/>
</div>
</div></div></div><!-- /patternTopBar--><div id="patternBottomBar"><div id="patternBottomBarContents"><div id="patternWebBottomBar"><table width="100%"><tr>
<td>Copyright 2016 The Board of Trustees<br/> of the University of Illinois.<a href="webmaster@cs.uic.edu">webmaster@cs.uic.edu</a></td>
<td><a href="https://wisest.uic.edu" target=_blank>WISEST<br />Helping Women Faculty Advance<br />Funded by NSF</a> </td><td>  <a href="http://engineering.uic.edu/bin/view/COE/CollegeGift" target="_top"><img alt="" src="https://www.cs.uic.edu/pub/Main/WebHome/gift.jpg" /></a> <a href="http://www1.cs.uic.edu/www/donate.php?audience=public" target="_top"> </a> </td><td> <a target="_blank" href="http://www.cs.uic.edu/CSOpenHouse"><img alt="" src="https://www.cs.uic.edu/pub/Main/WebHome/openHouseButton.gif" border="0" /></a> </td></tr></table></div><!--/patternWebBottomBar--></div><!-- /patternBottomBarContents--></div><!-- /patternBottomBar-->
</div><!-- /patternPage-->
</div><!-- /patternPageShadow-->
</div><!-- /patternScreen-->
</body></html>
<p />