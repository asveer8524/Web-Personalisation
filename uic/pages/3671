<html>
<head>
	
	<link rel=StyleSheet href="basenew.css" title="normal" />
	<title>Timothy Hinrichs</title>
</head>
<body id="timhinrichs">
<center>
<div id="container">  <!-- Wrapper for the 3 other panes: topbar, navigation, and content -->

<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr><td colspan="2">
<div id="toppane">
	<table cellpadding="0" cellspacing="0" width="100%">
	<tr><td><img src="images/tlhg.jpg" width="451" height="83" border="0"/></td>
	<td align="right"><img src="images/securitylogo.jpg" height="83" border="0" /></td>
	</tr>
	</table>
</div>
</td></tr>

<tr><td valign="top">
<div id="content">

<h3 class="redtext">Research</h3>
<p>Timothy L. Hinrichs is a researcher in <b>Computer Security</b>: the branch of Computer Science dedicated to improving the protection of computer systems against abuse while minimizing the degradation of their usability.  

<p>At the heart of security is the idea that a system ought to be used in 
some ways and ought not be used in others.  That is, the security of a 
system can only be evaluated in the context of the <b>semantics</b> for that 
system&mdash;the definition for how the system and its users are supposed to interact.  

<p>Hinrichs's research focuses on leveraging a separate, formal representation 
of a system's semantics to improve that system's security in two ways.  The 
first is precisely <b>assessing</b> how well a system meets its security 
objectives, a process that can be automated to some extent if the semantics 
is written in a machine-processable language.  The second is more ambitious: 
<b>enforcing</b> the semantics of the system automatically, which can be 
accomplished either by directly implementing the language in which the 
semantics are written or by synthesizing code that obeys the semantics.

<p>Because it 
is often convenient to represent a system's semantics in a logical language, 
Hinrichs's work draws upon and contributes to <b>Computational Logic</b>, the 
branch of Computer Science concerned with the representation and processing 
of information in the form of logical statements.

<!-- <p>Timothy L. Hinrichs is a researcher in <b>Computational Logic</b>: the branch of Computer Science concerned with the representation and processing of information in the form of logical statements (e.g. Prolog and first-order logic). In particular, he designs and implements systems that embrace logical contradictions.

<p><b>Logical contradictions</b> are pervasive both in the real world and in the digital world.  In the real world, humans cope with contradictions on a regular basis, e.g. two doctors giving differing opinions about the right course of treatment.  In the digital world on the other hand, computer systems may not recognize that a contradiction exists or may not be able to differentiate one contradiction from another.  Computer systems built assuming contradiction-free information will often behave erratically when that assumption is violated.  Because logical languages are a natural formalism for describing and reasoning about contradictions, results in this area draw upon and contribute to Computational Logic.

<p>Hinrichs also works in <b>computer security</b>, relying on results from Computational Logic to build systems with strong, mathematical guarantees.  Computational Logic is especially pertinent to the branch of computer security focused on policy-based system administration, where users encode their desired security and privacy policies in a logical language and rely on the system to enforce those policies automatically. Such systems must process the logical policy language efficiently, identify contradictions arising in collaborative settings, and operate reasonably even in the midst of contradictory policies.
-->

<!--<p>People the world over reason about contradictions on a daily basis.  Lawyers argue for and against defendants; politicians argue about plans for stimulating the economy; doctors argue over the right course of treatment for their patients.  Disagreements pervade our society, and understanding those disagreements as well as their causes helps individuals make decisions.

<p>In the digital world, contradictions are no less pervasive, and unfortunately computer systems today cannot differentiate one contradiction from another the way humans do.  Systems built assuming contradiction-free information will often behave unpredictably when that assumption is invalid, which is the rule rather than the exception on the Web.  Because logical languages are a natural formalism for describing and reasoning about contradictions, results in this area draw upon and contribute to Computational Logic.  

<p>One particularly important application area for Computational Logic is <b>computer security</b>, where one of the main thrusts is policy-based system administration.  In policy-based administration, users encode their desired security and privacy policies in a logical language and rely on the system to enforce those policies automatically.  Such systems must process the logical policy language efficiently, identify contradictions arising in collaborative settings, and operate reasonably even in the midst of contradictory policies. 
-->
<!--
<p>He currently focuses on <b>Collaborative Programming</b>: settings in which groups of people issue instructions to computer systems.  Collaborative Programming differs from traditional programming settings because instruction sets can be incomplete and conflicting.  An incomplete instruction set may only say what to do some of the time or what actions the system is forbidden from performing.  A conflicting instruction set may simultaneously instruct the system to perform some action and forbid the system from performing that same action.  

<p>Technology that supports Collaborative Programming must be able to combine independently authored instruction sets and be tolerant of incompleteness and conflicts.  Logical languages are a natural foundation for such technology and hence draw upon and contribute to the results of Computational Logic.
-->

<!--
<p>Declarative languages are especially useful in collaborative settings when people are working together to develop some kind of policy.  For example, network administrators often want to constrain the behavior of their network as a whole---they want to enforce a policy the governs the network's behavior.  When the network is large enough that several different administrators are each responsible for some realm of the network, no one administrator knows enough to author the policy alone.  Rather, the administrators must jointly contribute to and agree upon a set of network constraints.  A declarative language allows each administrator to author part of the policy individually and combine the results.  The design of the declarative language has a large impact on how easy it is to express a policy, combine policies, query policies, and detect errors.  Such issues are the topic of study in Computational Logic.
-->

<!--
<p>His current work, Extensional Reasoning, automatically translates questions about knowledge represented in classical logic into questions about database systems.  Answering the database version of the question can sometimes be several orders of magnitude more efficient because the knowledge captured by the logic has been organized into a special form that is amenable to processing.  
In a database system, every predicate corresponds to exactly one table, and 
the system differentiates between the explicit (extensional) predicates and 
the implicit (intensional) predicates. Extensionally defined tables can be 
reasoned about very efficiently because of smart indexing; intensionally 
defined tables can be reasoned about efficiently because negation as failure 
is used.  Current work focuses on translating a decidable logic into Datalog, but an obvious enhancement would translate an undecidable logic into a logic programming language.
-->



<h3 class="redtext">Education</h3>
Hinrichs received a B.S. from the <a href="http://www.uiuc.edu/">University of Illinois at Urbana-Champaign</a> in <a href="http://cs.uiuc.edu/">Computer Science</a> in 2001 and a Ph.D. from <a href="http://www.stanford.edu">Stanford University</a> in the <a href="http://cs.stanford.edu/">Computer Science</a> department's <a href="http://logic.stanford.edu/">Logic Group</a> in 2008.  He is currently a Postdoctoral Researcher in <a href="http://www.cs.uic.edu/">Computer Science</a> at the <a href="http://www.uic.edu">University of Illinois at Chicago</a>.

<h3 class="redtext">Documents</h3>
Hinrichs is on the job market this year.  His application materials can be
found below.
<ul>
<li><a href="papers/cv.pdf">Curriculum vitae</a> 
<li><a href="papers/research.pdf">Research statement</a>
<li><a href="papers/teaching.pdf">Teaching statement</a>
</ul>

</div>

</td><td valign="top" width="190">
<div id="sidebar">
	<div id="navigation">
		<a href="index.html">Home</a><br>
		<a href="projects.htm">Projects</a><br>
		<a href="publications.htm">Publications</a><br>
		<a href="personal.htm">Personal</a><br>
		<a href="links.htm">Links</a><br>
	</div>
	<div id="images">
 		<a href="images/tlh_large.jpg"><img src="images/tlh.jpg" width="150" height="195" style="border: 1px solid black"/></a>
		<p class="caption" style="text-align: left">
		SEO 1216<br>
		Department of Computer Science<br>
		851 S. Morgan (M/C 152)<br>
		Chicago, IL 60607-7053<br>
		</p>
		<p class="caption">
		&#104;&#105;&#110;&#114;&#105;&#99;&#104;&#115;&#64;&#117;&#105;&#99;&#46;&#101;&#100;&#117;<br>
		312-355-0950
		</p>
	</div>
</div>
</td></tr>
</table>

</div>
</center>

</body>
</html>
